
self <=> get internal hole punching working

generate random string for apprtc roomname...
	is there a way to first check if there is space avail in the room?
	OR even better, is there a way to clear all participants from the room?

new ios functionality:
	messageTextField should move up and down with keyboard
	chatHistoryTextView should shrink and grow with keyboard + messageTextField
	recv msg in textview
	save chat history locally
	show chat history in textview

chat_buf_t, make msg arbitrarily long by making it a pointer?

finish new user
does sign-out work?

lowercase letters only for username including
	search hashtbl keys

pretty ios POC app
database
install on server
make sure server is ALWAYS running

*******************  POC is done  **********************

FIX-ALL-BUGS
------------
************* UDP guarantee (i.e. packet loss check and resend) *************

stay-in-touch with peers (and self nodes?)

	second login (i.e. without cntrl-c'ing the-server) is broken
		-after add/accept contact request
		-chatting with existing contact
		-backgrounded?
		-all time time? 

email
fork/thread servers

To reduce endpoints (i.e. remove search-endpoint), can we stuff a struct of arbitrary size into the last member of type unsigned char*?

authentication
	when a user signs out
		a- the server should check if user's hashnode->nodes->node_count == 0 (i.e. user offline)
		b- if this is true, then the server should notify the user's contacts
		c- and the app should reflect updated online/offline status in the user's contacts list
		d- larger picture: each node should report changes in its status (online/asleep/busy/DoNotDisturb/Offline) to the server
		e- and the server should record that status in the hashnode->nodes->node
		f- and then notify the user's contacts' nodes of the status change

	remove node_t (from server->self-hashnode->nodes) when stay-in-touch hasn't been received after x time

	delete "stale" authn_nodes from authn hashtable
	delete "stale" token_nodes from token hashtable

	why isn't AES key being retrieved properly in ios app? something wrong in - (id)objectForKey:(id)key
	save server's RSA pub key in ios keychain? or is that not even necessary, since we should ping the authn server every session start anyway?
	encrypt AES key with RSA key
	handle new user vs existing user in ios app
	finish new user status (including password)

	handle handoff from authn server to main server
		1-add authn_token member to structs node_t and node_buf_t
		2-if new user, add hashnode and node (with authn token, ip, port, fam, etc)
		3-if existing user, add node to corresponding hashnode (with authn token, ip, port, fam)
		4-for 2 & 3, move big chunk of code from main-server->STATUS_INIT_NODE to authn-server, yeah?
	strlen + 1?
	delete items from keychain on app delete		

	do we even need an AuthN token? I guess it verifies to the main server that we're authenticated, right? If the main server doesn't find a matching AuthN token in the corresponding hashnode->node, then it rejects that node, right? Answer: copy AuthN key (concated fam, ip, port) and token to node_t and node_buf_t, and match key and token from node_t with incoming data. Ywah?

network encryption
	finish node-to-authn-server
		1- when the server responds to AUTHN_STATUS_NEW_USER
		2- when the server responds to AUTHN_STATUS_EXISTING_USER
		3- when the clients sends the user data to the server: udp_client->send_user()
	node-to-main-server (I think we can just encrypt and decrypt the entire struct node_buf_t)
	node-to-chat-server
	peer-to-peer (I think we can just encrypt and decrypt the entire struct node_buf_t)
	ACTUALLY, we can get rid of server-generated AES key: time-based reset of server AES IV... and notification to all nodes... once a day?
	ensure RSA swap request comes from Sup app (ie not from a fisher): maybe some sort of time-dependent key to pass with RSA swap

device goes to sleep or app is background... will stay-in-touch with servers continue? do we need to re-do hole punching on awake/foregrounding?

go back and use memcmp to compare all unsigned char arrays (i.e. ip6, etc)
thread the server
	recvfrom -> copy details (si_other, buf, etc) and handle in threadpool
thread wain et al

can we possibly put the in-memory structure in another program? if so, then we could stagger the server program and the memory program, which would allow us to change where the memory is run from without causing a disruption in service... i.e. start another memory program, wait for it to load up (copied from current memory program?), stop the server, and repoint the server to the new memory program... this might be a bad idea... but maybe a variation could help?

change authN server to TCP to avoid packet loss, ordering problems?

server host?
shrink node_buf, auth_buf, etc by converting to base64?

stress test in-memory data
	correct HASHSIZE AND AUTHN_HASHSIZE?

security
	server firewalls
	something else?

UDP-restricted firewall (STUN and TURN)

mvp app

APNs

test IPv6 somehow
valgrind (for client, try to use udp_client_test.c on linux)
create folder client-peer
clean up buttons and extraneous functions
get rid of node_min?
